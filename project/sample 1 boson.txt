{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "36b58304-8ba5-4b82-83ff-840ef6423511",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<svg width='356.000000' height='150.000000' viewBox='-3.000000 0.000000 353.000000 150.000000'><path d=\"M 10 25 L 25 25\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<path d=\"M 10 75 L 25 75\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<path d=\"M 37.9442 25.0002 C 51.653800000000004 25.0002 51.5923 50.0 65.3019 50.0 M 65.3038 50.0 C 51.59219999999999 50.0 51.6538 74.9998 37.94409999999999 74.9998 M 65.3038 49.99999999999999 L 87.1884 49.99999999999999 M 87.1884 49.99999999999999 C 100.9 49.99999999999999 100.83840000000001 25.000199999999992 114.5481 25.000199999999992 M 87.1884 49.99999999999999 C 100.9 49.99999999999999 100.83840000000001 74.9998 114.5481 74.9998 M 25.0 24.999999999999993 L 38.0 24.999999999999993 M 38.0019 74.9998 L 25.0 74.9998 M 112.6453 74.9998 L 125.0 74.9998 M 112.1944 24.999799999999993 L 125.0 24.999799999999993\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<text x=\"75.000000\" y=\"38.000000\" font-size=\"7.000000\"  text-anchor=\"middle\"></text>\n",
       "<path d=\"M 125 25 L 145 25 M 155 25 L 175 25\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<path d=\"M 140 35 L 160 35 L 160 15 L 140 15 L 140 35\" fill=\"lightgray\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<text x=\"150.000000\" y=\"44.000000\" font-size=\"7.000000\"  text-anchor=\"middle\">Φ=φ_a</text>\n",
       "<polyline points=\"125 75 175 75\" fill=\"transparent\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\" />\n",
       "<path d=\"M 187.9442 25.0002 C 201.6538 25.0002 201.5923 50.0 215.3019 50.0 M 215.3038 50.0 C 201.5922 50.0 201.6538 74.9998 187.9441 74.9998 M 215.3038 49.99999999999999 L 237.1884 49.99999999999999 M 237.1884 49.99999999999999 C 250.9 49.99999999999999 250.8384 25.000199999999992 264.5481 25.000199999999992 M 237.18839999999997 49.99999999999999 C 250.89999999999998 49.99999999999999 250.83839999999998 74.9998 264.5481 74.9998 M 174.99999999999997 24.999999999999993 L 187.99999999999997 24.999999999999993 M 188.00189999999998 74.9998 L 174.99999999999997 74.9998 M 262.64529999999996 74.9998 L 274.99999999999994 74.9998 M 262.1944 24.999799999999993 L 275.0 24.999799999999993\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<text x=\"225.000000\" y=\"38.000000\" font-size=\"7.000000\"  text-anchor=\"middle\"></text>\n",
       "<path d=\"M 275 75 L 295 75 M 305 75 L 325 75\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<path d=\"M 290 85 L 310 85 L 310 65 L 290 65 L 290 85\" fill=\"lightgray\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<text x=\"300.000000\" y=\"94.000000\" font-size=\"7.000000\"  text-anchor=\"middle\">Φ=φ_b</text>\n",
       "<polyline points=\"275 25 325 25\" fill=\"transparent\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\" />\n",
       "<path d=\"M 325 25 L 340 25\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<path d=\"M 325 75 L 340 75\" fill=\"none\" stroke=\"black\" stroke-width=\"1.000000\" stroke-linejoin=\"miter\"/>\n",
       "<text x=\"350.000000\" y=\"25.000000\" font-size=\"6.000000\"  text-anchor=\"end\">0</text>\n",
       "<text x=\"350.000000\" y=\"75.000000\" font-size=\"6.000000\"  text-anchor=\"end\">1</text>\n",
       "<text x=\"0.000000\" y=\"25.000000\" font-size=\"6.000000\"  text-anchor=\"start\">0</text>\n",
       "<text x=\"0.000000\" y=\"75.000000\" font-size=\"6.000000\"  text-anchor=\"start\">1</text></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython import display\n",
    "from collections import Counter\n",
    "from tabulate import tabulate\n",
    "from tqdm.auto import tqdm\n",
    "import gzip\n",
    "import pickle\n",
    "import time\n",
    "\n",
    "import sympy as sp\n",
    "import random\n",
    "\n",
    "import perceval as pcvl\n",
    "import perceval.lib.symb as symb\n",
    "n = 14       #number of photons at the input\n",
    "m = 20      #number of modes\n",
    "N = 5000  #number of samplings\n",
    "Unitary_60 = pcvl.Matrix.random_unitary(m) #creates a random unitary of dimension 60\n",
    "mzi = (symb.BS() // (0, symb.PS(phi=pcvl.Parameter(\"φ_a\")))\n",
    "       // symb.BS() // (1, symb.PS(phi=pcvl.Parameter(\"φ_b\"))))\n",
    "pcvl.pdisplay(mzi)\n",
    "Linear_Circuit_60 = pcvl.Circuit.decomposition(Unitary_60, mzi,\n",
    "                                               phase_shifter_fn=symb.PS,\n",
    "                                               shape=\"triangle\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "48c9ccd5-6919-4073-87ae-9fcacb55a955",
   "metadata": {},
   "outputs": [],
   "source": [
    "Sampling_Backend = pcvl.BackendFactory().get_backend(\"CliffordClifford2017\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "95177372-a283-4994-b982-d4704197cb6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The input state:  |1,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1>\n"
     ]
    }
   ],
   "source": [
    "#one can choose which mode he/she wants at input, or we can choose it randomly\n",
    "def Generating_Input(n, m, modes = None):\n",
    "    \"This function randomly chooses an input with n photons in m modes.\"\n",
    "    if modes == None :\n",
    "        modes = sorted(random.sample(range(m),n))\n",
    "    state = \"|\"\n",
    "    for i in range(m):\n",
    "        state = state + \"0\"*(1 - (i in modes)) +\"1\"*(i in modes)+ \",\"*(i < m-1)\n",
    "    return pcvl.BasicState(state + \">\")\n",
    "\n",
    "input_state = Generating_Input(n, m)\n",
    "print(\"The input state: \", input_state)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5461f2e3-e94e-4f72-8e8b-13703f672279",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|1,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1>\n"
     ]
    }
   ],
   "source": [
    "s1 = input_state\n",
    "print(s1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dcc9907b-3220-4e0c-b09e-33c35a90249c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0>\n"
     ]
    }
   ],
   "source": [
    "input_state = Generating_Input(n, m)\n",
    "#print(\"The input state: \", input_state)\n",
    "s2 = input_state\n",
    "print(s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d4a80588-d6a5-4e74-8824-bee4492e8856",
   "metadata": {},
   "outputs": [],
   "source": [
    "coding = []\n",
    "for i in range(1, 20):\n",
    "    if 1:\n",
    "        coding.append('0')\n",
    "    elif 2:\n",
    "        coding.append('1') \n",
    "    else: coding.append('*')\n",
    "    #else coding[i] = '*'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0de28699-6778-48aa-96aa-8a64a2ace7de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S1 |1,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1>\n",
      "S2 |1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0>\n",
      "Coding ['*', '*', '*', '0', '*', '*', '*', '1', '*', '1', '*', '*', '1', '*', '1', '*', '*', '0', '0', '0']\n",
      "The final qauntum random number: 01111000\n"
     ]
    }
   ],
   "source": [
    "coding = []\n",
    "for i in range(0, 20):\n",
    "    if s1[i] == 1 and s2[i] == 0:\n",
    "        coding.append('0')\n",
    "    elif s1[i] == 0 and s2[i] == 1:\n",
    "        coding.append('1') \n",
    "    else: coding.append('*')\n",
    "    #else coding[i] = '*'\n",
    "print(\"S1\" , s1)\n",
    "print(\"S2\" , s2)\n",
    "print(\"Coding\" , coding)\n",
    "\n",
    "r = ''\n",
    "for i in coding:\n",
    "    if i != '*':\n",
    "       # r.append(i)\n",
    "        r = r + i\n",
    "print(\"The final qauntum random number:\", r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "df776b0e-65cb-4361-83a4-b36c5de08ce5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sampled outputs are:\n",
      "|4,0,0,0,0,3,0,1,0,0,0,0,3,0,0,2,1,0,0,0>\n",
      "|1,3,1,0,3,0,0,0,1,0,0,4,0,0,0,0,0,0,0,1>\n",
      "|1,0,4,1,0,1,0,1,0,0,0,1,1,0,1,0,2,0,0,1>\n",
      "|0,1,3,0,0,3,0,1,1,1,2,0,1,0,0,0,0,0,1,0>\n",
      "|0,1,0,2,0,0,0,1,1,2,0,0,1,2,1,0,0,2,0,1>\n",
      "|0,0,0,1,0,1,2,1,1,0,2,0,1,1,0,1,0,1,1,1>\n",
      "|0,3,0,0,0,1,0,3,1,1,0,0,0,1,0,0,0,0,2,2>\n",
      "|0,0,1,0,4,0,0,0,0,0,5,1,0,0,0,1,0,0,0,2>\n",
      "|0,0,0,1,1,0,1,7,0,2,0,0,0,0,0,1,0,0,0,1>\n",
      "|1,1,0,1,0,0,0,0,6,0,2,0,0,0,0,0,0,2,1,0>\n"
     ]
    }
   ],
   "source": [
    "print(\"The sampled outputs are:\")\n",
    "#S1 =  pcvl.BasicState(\"|>\")\n",
    "for _ in range(10):\n",
    "    print(Sampling_Backend(Unitary_60).sample(input_state))\n",
    "   \n",
    "#print(S1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "67db6a43-9bf8-4e3d-9e40-28ce0f07c0dc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9972c057-2882-42fd-8993-bc661e59ae1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# if we want to launch parallel process\n",
    "worker_id=1\n",
    "\n",
    "#store the input and the unitary\n",
    "with open(\"%dphotons_%dmodes_%dsamples-worker%s-unitary.pkl\" %(n,m,N,worker_id), 'wb') as f:\n",
    "    pickle.dump(Unitary_60, f)\n",
    "\n",
    "with open(\"%dphotons_%dmodes_%dsamples-worker%s-inputstate.pkl\" %(n,m,N,worker_id), 'w') as f:\n",
    "    f.write(str(input_state)+\"\\n\")\n",
    "\n",
    "\n",
    "with gzip.open(\"%dphotons_%dmodes_%dsamples-worker%s-samples.txt.gz\" %(n,m,N,worker_id), 'wb') as f:\n",
    "    start = time.time()\n",
    "    for i in range(N):\n",
    "        f.write((str(Sampling_Backend(Unitary_60).sample(pcvl.BasicState(input_state)))+\"\\n\").encode());\n",
    "    end = time.time()\n",
    "    f.write(str(\"==> %d\\n\" % (end-start)).encode())\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "46fdb918-de7c-494b-8ca0-c1d3aa1a9c35",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gzip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "64e50a07-b6d4-4d1c-8e73-9c7c2b7813b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5000 samples\n",
      "Bunching Distribution: 0\t0\t0\t0\t0\t0\t1\t0\t3\t3\t5\t8\t24\t48\t88\t133\t363\t595\t1380\t2349\n"
     ]
    }
   ],
   "source": [
    "worker_id = 1\n",
    "count = 0\n",
    "bunching_distribution = Counter()\n",
    "\n",
    "with gzip.open(\"%dphotons_%dmodes_%dsamples-worker%s-samples.txt.gz\"%(n,m,N,worker_id), \"rt\") as f:\n",
    "    for l in f:\n",
    "        l = l.strip()\n",
    "        if l.startswith(\"|\") and l.endswith(\">\"):\n",
    "            try:\n",
    "                st = pcvl.BasicState(l)\n",
    "                count+=1\n",
    "                bunching_distribution[st.photon2mode(st.n-1)]+=1\n",
    "            except Exception:\n",
    "                pass\n",
    "print(count, \"samples\")\n",
    "print(\"Bunching Distribution:\", \"\\t\".join([str(bunching_distribution[k]) for k in range(m)]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15fd5937-bad5-4aa3-9717-57e411c3841d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 [Womanium]",
   "language": "python",
   "name": "python3_womanium_go14xk"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
